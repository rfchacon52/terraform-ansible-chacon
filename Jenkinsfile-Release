pipeline {
    agent any

    environment {
        IMAGE_NAME = 'sanjeevkt720/jenkins-flask-app'
        IMAGE_TAG = "${IMAGE_NAME}:${env.GIT_COMMIT}"
       //  KUBECONFIG = credentials('kubeconfig-credentials-id')
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        GH_TOKEN = credentials('github-access-token')
        KUBE_CONFIG_PATH      = '~/.kube/config'
        JAVA_HOME             = '/usr/lib/jvm/java-17-openjdk-17.0.14.0.7-2.el9.x86_64/'
        MAVEN_HOME            = '/usr/share/maven'

    }



    stages {

        stage("Check for Git Tag") {
            steps {
                script {
                    def tag = sh(returnStdout: true, script: "git tag --contains").trim()

                    if (tag != null) {
                        env.GIT_TAG = tag
                    } else {
                        env.GIT_TAG = ''
                    }
                    echo "GIT_TAG is set to: ${env.GIT_TAG}"
                    env.IMAGE_TAG_RELEASE = "${IMAGE_NAME}:${GIT_TAG}"
                }
            }
        }

        stage('Setup') {
            steps {
                script {
                    sh "poetry install --with dev"
                }
            }
        }

        stage('Create Release') {
            when {
                expression {
                    return env.GIT_TAG == "" // Only run if GIT_TAG is not set
                }
            }
            steps {
                script {
                    
                    sh 'printenv'
                    def tag = sh(returnStdout: true, script: "poetry run semantic-release version").trim()
                    echo "${tag}"

                    sh "poetry run semantic-release publish"


                    echo "Published new tag: ${tag}"
                }
            }
        }


        stage("Build and Deploy") {
            when {
                expression {
                    return env.GIT_TAG != "" // Only run if GIT_TAG is not empty
                }
            }


             stage('Docker Login') {
               steps {
                script {
                    withCredentials([string(credentialsId: 'dockerhub-credentials', variable: 'DOCKER_TOKEN')]) {
                        sh '''
                            echo "$DOCKER_TOKEN" | docker login -u "rfchacon717" --password-stdin
                            echo "Building Docker image"
                            docker build -t ${IMAGE_TAG} -t ${IMAGE_TAG_RELEASE} . 
                            echo "Piuching Docker image" 
                            docker push --all-tags ${IMAGE_NAME}
                            echo "Docker image push successfully"
                            docker push rfchacon717/chacon-image:latest
                        '''
                      }
                    }

                    }
                }

                stage('Deploy') {
                    steps {
                        sh '''
                        echo "Deploy to k8"
                        ''' 
                    }
                }
            }
        }

    }

